#!/usr/bin/python -tt
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Sep 10 09:05:06 2010

import wx
import re
import re_parse

# begin wxGlade: extracode
from wx import stc
# end wxGlade

STYLE_OVERLAP=0x80 # underline
STYLE_DEFAULT=0x0

group_color_names = [
        'WHITE', # N/A
        'CYAN',
        'GREEN',
        'YELLOW',
        'ORANGE',
        'ORANGE RED',
        'VIOLET',
        'VIOLET RED',

        #'AQUAMARINE',
        #'BLACK',
        #'BLUE',
        #'BLUE VIOLET',
        #'BROWN',
        #'CADET BLUE',
        #'CORAL',
        #'CORNFLOWER BLUE',
        #'CYAN',
        #'DARK GREY',
        #'DARK GREEN',
        #'DARK OLIVE GREEN',
        #'DARK ORCHID',
        #'DARK SLATE BLUE',
        #'DARK SLATE GREY',
        #'DARK TURQUOISE',
        #'DIM GREY',
        #'FIREBRICK',
        #'FOREST GREEN',
        #'GOLD',
        #'GOLDENROD',
        #'GREY',
        #'GREEN',
        #'GREEN YELLOW',
        #'INDIAN RED',
        #'KHAKI',
        #'LIGHT BLUE',
        #'LIGHT GREY',
        #'LIGHT STEEL BLUE',
        #'LIME GREEN',
        #'MAGENTA',
        #'MAROON',
        #'MEDIUM AQUAMARINE',
        #'MEDIUM BLUE',
        #'MEDIUM FOREST GREEN',
        #'MEDIUM GOLDENROD',
        #'MEDIUM ORCHID',
        #'MEDIUM SEA GREEN',
        #'MEDIUM SLATE BLUE',
        #'MEDIUM SPRING GREEN',
        #'MEDIUM TURQUOISE',
        #'MEDIUM VIOLET RED',
        #'MIDNIGHT BLUE',
        #'NAVY',
        #'ORANGE',
        #'ORANGE RED',
        #'ORCHID',
        #'PALE GREEN',
        #'PINK',
        #'PLUM',
        #'PURPLE',
        #'RED',
        #'SALMON',
        #'SEA GREEN',
        #'SIENNA',
        #'SKY BLUE',
        #'SLATE BLUE',
        #'SPRING GREEN',
        #'STEEL BLUE',
        #'TAN',
        #'THISTLE',
        #'TURQUOISE',
        #'VIOLET',
        #'VIOLET RED',
        #'WHEAT',
        #'WHITE',
        #'YELLOW',
        #'YELLOW GREEN',
        ]

group_styles = None
default_font = None
default_style = None
DUPL_STYLE = None
BRACKET_STYLE = None
STR_ESC_STYLE = None
RE_ESC_STYLE = None
RANGE_STYLE = None
INVALID_STYLE = None

FONT_SIZE=14

max_level = 1
#max_level = 20

def log(level, fcn, s, sub=None,):
    if level <= max_level:
        if sub:
            s = s % sub
        print fcn+': ', sub

class MyTextStyle(object):
    # this will be slow, but I don't really mind much
    def __init__(self):
        # list of (start, stop, style)
        self.__data = []
    def set_style(self, start, stop, style):
        d_match = None
        # Try to find the most-specific current style
        for i in range(len(self.__data)):
            d = self.__data[i]
            d_start, d_stop, d_style = d
            if start >= d_start and start < d_stop:
                # sub-range?
                if d_stop < stop:
                    raise Exception('attempted to style across style boundaries -- bad')
                d_match = i
                break

         # most specific to least specific
        if d_match:
            self.__data.insert( d_match, (start, stop, style) )
        else:
            self.__data.append( (start, stop, style) )
    def get_style(self, pos):
        for i in range(len(self.__data)):
             d_start, d_stop, d_style = self.__data[i]
             if pos >= d_start and pos < d_stop:
                 return d_style
        return default_style
    def get_style_data(self):
        return sorted(self.__data[:])

def style_init():
    # wx is goofy about fonts... we have to create an App first...
    global DUPL_STYLE
    DUPL_STYLE = wx.TextAttr(wx.NullColour,"NAVY")
    bracket_font = wx.Font(FONT_SIZE,wx.FONTSTYLE_NORMAL,wx.NORMAL,wx.FONTWEIGHT_BOLD,faceName='Courier')
    global BRACKET_STYLE
    #BRACKET_STYLE = wx.TextAttr(wx.NullColour,"DARK GREY",bracket_font)
    BRACKET_STYLE = wx.TextAttr(wx.NullColour,wx.NullColour,bracket_font)
    global group_styles
    group_styles = [ wx.TextAttr( i, wx.NullColour ) for i in group_color_names ]
    global default_font
    default_font = wx.Font(12,wx.FONTSTYLE_NORMAL,wx.NORMAL,wx.FONTWEIGHT_NORMAL,faceName='Courier')
    global default_style
    default_style = wx.TextAttr( 'WHITE', 'BLACK', default_font)
    global STR_ESC_STYLE
    STR_ESC_STYLE = wx.TextAttr( 'LIGHT GREEN', wx.NullColour)
    global RE_ESC_STYLE
    RE_ESC_STYLE = wx.TextAttr( 'LIGHT BLUE', wx.NullColour )
    global RANGE_STYLE
    RANGE_STYLE = wx.TextAttr(wx.NullColour, wx.NullColour, default_font)
    global INVALID_STYLE
    INVALID_STYLE = wx.TextAttr('LIGHT BLUE', 'DARK RED', default_font)

def print_style(style):
    log( 3, 'print_style', ' '.join([style.GetFont(), style.GetTextColour(), style.GetBackgroundColour()]) )

class MyPatternStyledTextCtrl(wx.TextCtrl):
    def __init__(self, *args, **kw):
        if not kw.has_key('style'):
            kw['style'] = wx.TE_RICH2 | wx.TE_MULTILINE
        wx.TextCtrl.__init__(self, *args, **kw)
        if not self.SetDefaultStyle( default_style ):
            log(1, 'MyPatternStyledTextCtrl.__init__', "Failed to set default style")
        self.SetBackgroundColour('BLACK')
        self.SetForegroundColour('WHITE')
        self.SetFont(default_font)
        self._re_style='Extended'
        if self._re_style == 'Extended':
            self._re_parser = re_parse.ExtendedREParser(self)
        self.__callbacks = []
        self._text = ''
    def AddHandler(self, handler):
        self.__callbacks.append(handler)
    def SetReStyle(self, style):
        self._re_style = style
        self.OnUpdate(caller='MyPatternStyledTextCtrl.SetReStyle')
    def ConvertRegex(self, regex):
        if self._re_style == 'Extended':
            return regex
        # FIXME: replace \( with (, ( with \(, but not inside []...
    def _CallHandlers(self, *args, **kw):
        for callback in self.__callbacks:
            try:
                callback(*args, **kw)
            except Exception,e:
                log(1, 'MyPatternStyledTextCtrl._CallHandlers', e)
                raise
    def OnUpdate(self, evt=None, **kw):
        log(5, 'MyPatternStyledTextCtrl.OnUpdate', '(%s,%s)', (evt, kw))
        if evt:
            log(10, 'MyPatternStyledTextCtrl.OnUpdate', (evt.IsCommandEvent(),evt.GetEventType(),))

        text = self.GetValue()
        if self._text == text:
            return # nothing changed
        self._text = text
        # do some color foo
        self._re_parser.parse(self._text)
        regex = self.ConvertRegex(self._text)
        if '\n' in regex:
            # oops
            pass
        # pretty colors, please
        # update text box
        self._CallHandlers(regex=regex, regex_text=self._text)
    def startParsing(self,s):
        self._clear_style()
        self.parse_groups = {}
        self.parse_string = s
        self.parse_format = [0] * len(s)
        self.parse_operations = []
        self.num_groups = None
    def endParsing(self):
        self.__curr_group = 1
        self.num_groups = len(self.parse_groups)
        for k in sorted(self.parse_groups.keys()):
            self.colorGroup( *(self.parse_groups[k]) )
            self.__curr_group += 1
        for operation, args in self.parse_operations:
            operation(*args)
        self._apply_style()
        del self.__curr_group
    def handleType(self, s, loc, toks, t_func):
        self.parse_operations.insert(0, (t_func, (loc, re_parse.toklen(toks[0]),
            loc+re_parse.toklen(toks) - re_parse.toklen(toks[-1]), re_parse.toklen(toks[-1]))) )
    def handleDupl(self, s, loc, toks):
        self.handleType(s,loc,toks,self.colorDupl)
    def handleGroup(self, s, loc, toks):
        #self.handleType(s,loc,toks,self.colorGroup)
        self.parse_groups[loc] = (loc, re_parse.toklen(toks[0]),
                loc+re_parse.toklen(toks) - re_parse.toklen(toks[-1]), re_parse.toklen(toks[-1]), )
    def handleBracketList(self, s, loc, toks):
        self.handleType(s,loc,toks,self.colorBracketList)
    def handleReEscape(self, s, loc, toks):
        self.handleType(s,loc,toks,self.colorReEscape)
    def handleStringEscape(self, s, loc, toks):
        self.handleType(s,loc,toks,self.colorStringEscape)
    def handleRange(self, s, loc, toks):
        self.handleType(s,loc,toks,self.colorRange)
    def handleBackreference(self, s, loc, toks):
        self.handleType(s,loc,toks,self.colorBackreference)
    def handleInvalid(self, s, loc, toks):
        self.handleType(s, loc, toks, self.colorInvalid)
    def setTextStyle_direct(self, start, end, style):
        ins_point = self.GetInsertionPoint()
        curr_style = wx.TextAttr()
        self.SetInsertionPoint(0)
        if not self.SetStyle( start, end, curr_style.Merge(style, curr_style) ): log(1, 'MyPatternStyledTextCtrl.setTextStyle_direct', 'Failed to set color')
        self.SetInsertionPoint(ins_point)
    def _clear_style(self):
        self._style = MyTextStyle()
    def _apply_style(self):
        ins_point = self.GetInsertionPoint()
        self.SetInsertionPoint(0)
        self.SetStyle(0,len(self._text), default_style)
        for start, end, style in self._style.get_style_data():
            self.SetInsertionPoint(0)
            if not self.SetStyle( start, end, style ): log(1, 'MyPatternStyledTextCtrl.setTextStyle', 'Failed to set style: (%s,%s,%s)', (start,end,style))
        self.SetInsertionPoint(ins_point)
    def setTextStyle(self, start, end, style):
        curr_style = self._style.get_style(start)
        use_style = curr_style.Merge(curr_style, style)
        self._style.set_style(start, end, use_style)
    def colorDupl(self, start, startlen, end, endlen):
        self.setTextStyle( start, end + endlen, DUPL_STYLE )
    def colorGroup(self, start, startlen, end, endlen):
        group_num = self.__curr_group
        self.setTextStyle( start, end + endlen, group_styles[group_num] )
    def colorBracketList(self, start, startlen, end, endlen):
        self.setTextStyle( start, end + endlen, BRACKET_STYLE )
    def colorReEscape(self, start, startlen, end, endlen):
        self.setTextStyle( start, end + endlen, RE_ESC_STYLE )
    def colorStringEscape(self, start, startlen, end, endlen):
        self.setTextStyle( start, end + endlen, STR_ESC_STYLE )
    def colorRange(self, start, startlen, end, endlen):
        self.setTextStyle( start, end + endlen, RANGE_STYLE )
    def colorBackreference(self, start, startlen, end, endlen):
        group_num = int(self.parse_string[start+1:end+endlen])
        self.setTextStyle( start, end + endlen, group_styles[group_num] )
    def colorInvalid(self, start, startlen, end, endlen):
        self.setTextStyle( start, end+endlen, INVALID_STYLE )


class MyReplacePatternStyledTextCtrl(MyPatternStyledTextCtrl):
    def __init__(self, *args, **kw):
        MyPatternStyledTextCtrl.__init__(self, *args, **kw)
        self._pattern_parser = re_parse.ReplacePatternParser(self)
    def OnUpdate(self, evt=None, **kw):
        log(5, "MyReplacePatternStyledTextCtrl", "(%s, %s)", (evt, kw) )
        newtext = self.GetValue()
        if newtext != self._text:
            self._text = newtext
            self._pattern_parser.parse(self._text)
            self._CallHandlers(replace=self._text)

class MyStyledTextCtrl(wx.stc.StyledTextCtrl):
    def __init__(self, *args, **kw):
        stc.StyledTextCtrl.__init__(self, *args, **kw)
        self.StyleSetSpec( 0x20, 'fore:#808080,back:#0000000,face:Courier,size:%s' % FONT_SIZE) # "default"
        self.StyleSetSpec( 0x00, 'fore:#808080,back:#0000000,face:Courier,size:%s' % FONT_SIZE)
        self.SetLexer(stc.STC_LEX_CONTAINER)
        self._callbacks = []
        self._text = ''
        for i in range(len(group_color_names)):
            self.StyleSetForeground(i+1,group_color_names[i])
            self.StyleSetBackground(i+1,'BLACK')
        self._regex_text = ''
        self._regex=re.compile(self._regex_text)
    def AddHandler(self, handler):
        self._callbacks.append(handler)
    def _CallHandlers(self, *args, **kw):
        for handler in self._callbacks:
            handler( *args, **kw )
    def SetRegex(self, **kw):
        log(5, "MyStyledTextCtrl.SetRegex", kw)
        if not kw.has_key('regex_text'):
            return
        regex_text = kw['regex_text']
        if self._regex_text != regex_text:
            self._regex_text = regex_text
            self._regex = re.compile(self._regex_text)
            self._CallHandlers( regex=self._regex, regex_text = self._regex_text )
            self.OnUpdate(caller='MyStyledTextCtrl.SetRegex')

class MyRegexMatchCtrl(MyStyledTextCtrl):
    def get_style(self, group_num):
        return (group_num % 32) + 1
    def DoRegexStyle(self, evt):
        if not hasattr(self,'_regex'):
            log(1, 'MyRegexMatchCtrl.DoRegexStyle', '_regex undefined')
            return
        current = self.GetFirstVisibleLine()
        while(self.GetLineVisible(current)):
            line_start = self.PositionFromLine(current)
            if line_start < 0:
                break
            line = self.GetLine(current)

            # FIXME: can we just treat this as a single line?
            style = [STYLE_DEFAULT] * len(line)
            for match in self._regex.finditer(line):
                if match:
                    num_groups = len(match.groups())
                    for i in range(num_groups+1):
                        for j in range(match.start(i), match.end(i)):
                            new_style = self.get_style(i)
                            style[j] = new_style | STYLE_OVERLAP
                            #if style[j] != STYLE_DEFAULT:
                            #    style[j] = new_style | STYLE_OVERLAP
                            #else:
                            #    style[j] = new_style
                self.StartStyling(line_start, 0xff)
                style_str = ''.join(map(chr,style))
                self.SetStyleBytes(len(style), style_str)
            current += 1
    def OnUpdate(self, evt=None, **kw):
        log(5, "MyRegexMatchCtrl.OnUpdate", "(%s, %s)", (evt, kw) )
        new_text = self.GetText()
        if new_text != self._text:
            self._text = new_text
            self.DoRegexStyle(None)
            self._CallHandlers(text=self._text)

class MyReplaceTextCtrl(MyStyledTextCtrl):
    def __init__(self, *args, **kw):
        MyStyledTextCtrl.__init__(self,*args, **kw)
        self.SetReadOnly(True)
        self._replace=''
        self._text=''
    def OnUpdate(self, evt=None, **kw):
        log(5, "MyReplaceTextCtrl.OnUpdate", "(%s, %s)", (evt, kw) )
        if evt is not None:
            log(10, 'MyReplaceTextCtrl.OnUpdate', (evt.IsCommandEvent(),evt.GetEventType(),))
        for i in ('_text','_replace','_regex'):
            if not hasattr(self, i):
                log(2, 'MyReplaceTextCtrl.OnUpdate', 'Missing %s', i)
                return
            else:
                log(100, 'MyReplaceTextCtrl.OnUpdate', '%s: %s', (i, getattr(self,i)) )
        try:
            new_text = self._regex.sub(self._replace, self._text, )
            log(200, 'MyReplaceTextCtrl.OnUpdate', 'new_text: %s', new_text)
        except Exception, e:
            log(200, 'MyReplaceTextCtrl.OnUpdate', e)
            raise
        self.SetReadOnly(False)
        self.SetText( new_text )
        self.SetReadOnly(True)
    def SetReplace(self, **kw):
        log(5, "MyReplaceTextCtrl.SetReplace", kw)
        if not kw.has_key('replace'):
            return
        replace = kw['replace']
        if self._replace != replace:
            self._replace = replace
            self.OnUpdate(caller='MyReplaceTextCtrl.SetReplace')
    def SetOriginal(self, **kw):
        log(5, "MyReplaceTextCtrl.SetOriginal", kw)
        if not kw.has_key('text'):
            return
        text = kw['text']
        if self._text != text:
            self._text = text
            self.OnUpdate(caller='MyReplaceTextCtrl.SetOriginal')

class MyReChoice(wx.Choice):
    def SetTextCtrl(self, ctrl):
        self._text_ctrl = ctrl
    def OnChange(self, evt):
        self._text_ctrl.SetReStyle(self.GetSelection)

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)
        style_init()

        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        self.notebook_1 = wx.Notebook(self)
        self.pattern_matching_pane = wx.Panel(self.notebook_1, -1)
        self.search_replace_pane = wx.Panel(self.notebook_1, -1)

        self.pattern_match_pattern = MyPatternStyledTextCtrl(self.pattern_matching_pane, -1)
        self.load_file_button = wx.Button(self.pattern_matching_pane, -1, "load text from file")
        self.regex_type_choice = MyReChoice(self.pattern_matching_pane, -1, choices=["POSIX Extended", "POSIX Basic", ])
        self.pattern_match_text = MyRegexMatchCtrl(self.pattern_matching_pane, -1)

        self.search_pattern = MyPatternStyledTextCtrl(self.search_replace_pane, -1, "")
        self.search_text_box = MyRegexMatchCtrl(self.search_replace_pane, -1)
        self.replace_pattern = MyReplacePatternStyledTextCtrl(self.search_replace_pane, -1, "")
        self.replace_text_box = MyReplaceTextCtrl(self.search_replace_pane, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(stc.EVT_STC_STYLENEEDED, self.pattern_match_text.OnUpdate, self.pattern_match_text)
        self.Bind(wx.EVT_TEXT, self.pattern_match_pattern.OnUpdate, self.pattern_match_pattern)
        self.Bind(wx.EVT_CHAR, self.pattern_match_pattern.OnUpdate, self.pattern_match_pattern)

        self.Bind(stc.EVT_STC_STYLENEEDED, self.search_text_box.OnUpdate, self.search_text_box)
        self.Bind(wx.EVT_TEXT, self.search_pattern.OnUpdate, self.search_pattern)
        self.Bind(wx.EVT_CHAR, self.search_pattern.OnUpdate, self.search_pattern)

        #self.Bind(stc.EVT_STC_STYLENEEDED, self.replace_text_box.OnUpdate, self.replace_text_box) # handled directly, this causes quite a loop...
        self.Bind(wx.EVT_TEXT, self.replace_pattern.OnUpdate, self.replace_pattern)
        self.Bind(wx.EVT_CHAR, self.replace_pattern.OnUpdate, self.replace_pattern)
    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Regular Expressions")
        self.regex_type_choice.SetSelection(0)
        # end wxGlade
        self.pattern_match_pattern.AddHandler(self.pattern_match_text.SetRegex)
        self.search_pattern.AddHandler(self.search_text_box.SetRegex)
        self.search_pattern.AddHandler(self.replace_text_box.SetRegex)
        self.replace_pattern.AddHandler(self.replace_text_box.SetReplace)
        self.search_text_box.AddHandler(self.replace_text_box.SetOriginal)
    def __do_layout(self):
        #main_sizer = wx.BoxSizer(wx.VERTICAL)
        main_sizer = wx.BoxSizer()
        
        pattern_options_sizer = wx.BoxSizer(wx.HORIZONTAL)
        pattern_options_sizer.Add(self.load_file_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        pattern_options_sizer.Add(self.regex_type_choice, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)

        main_pattern_sizer = wx.BoxSizer(wx.VERTICAL)
        main_pattern_sizer.Add(self.pattern_match_pattern, 0, wx.EXPAND, 0)
        main_pattern_sizer.Add(pattern_options_sizer, 0, wx.EXPAND, 0)
        main_pattern_sizer.Add(self.pattern_match_text, 100, wx.EXPAND, 0)
        self.pattern_matching_pane.SetSizer(main_pattern_sizer)

        
        search_sizer = wx.BoxSizer(wx.VERTICAL)
        search_sizer.Add(self.search_pattern, 0, wx.EXPAND, 0)
        search_sizer.Add(self.search_text_box, 3, wx.EXPAND, 0)

        replace_sizer = wx.BoxSizer(wx.VERTICAL)
        replace_sizer.Add(self.replace_pattern, 0, wx.EXPAND, 0)
        replace_sizer.Add(self.replace_text_box, 3, wx.EXPAND, 0)

        main_sr_sizer = wx.BoxSizer(wx.HORIZONTAL)
        main_sr_sizer.Add(search_sizer, 1, wx.EXPAND, 0)
        main_sr_sizer.Add(replace_sizer, 1, wx.EXPAND, 0)

        self.search_replace_pane.SetSizer(main_sr_sizer)
        
        self.notebook_1.AddPage(self.pattern_matching_pane, "Pattern Matching")
        self.notebook_1.AddPage(self.search_replace_pane, "Search and Replace")

        main_sizer.Add(self.notebook_1, 1, wx.EXPAND, 0)
        
        self.SetSizer(main_sizer)
        main_sizer.Fit(self)
        self.Layout()
    def __test_styles(self, ctrl):
        ctrl.ClearAll()
        lines = []
        for i in range(32):
            line = '0x%x - %s - ABCabc123\n' % (i,style_definitions[i])
            style =  chr(i)
            #line2 = '0x%x - %s - ? - ABCabc123\n' % ((i << 3), style_definitions[i])
            #style2 = chr(i<<3)
            lines.append(style.join(line))
            lines.append('\x00')
            #lines.append(style2.join(line2))
            #lines.append('\x00')
        ctrl.AddStyledText(''.join(lines))
            
if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    main_frame = MyFrame(None, -1, "")
    app.SetTopWindow(main_frame)
    main_frame.Show()
    app.MainLoop()

